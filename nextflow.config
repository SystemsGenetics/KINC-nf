/*
========================================================================================
    systemsgenetics/kinc-nf Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    data                       = null
    smeta                      = null
    max_gpus                   = 0
    net_type                   = 'cs'
    graph_name                 = 'KINC csGCN'
    graph_id                   = null

    // kinc run import-emx options
    data_missing_val           = 'NA'
    data_num_samples           = 0
    data_has_row_ids           = false

    // kinc run similarity options
    similarity_chunks = 10
    similarity_clusmethod = 'gmm'
    similarity_corrmethod = 'spearman'
    similarity_minexpr = null
    similarity_minsamp = 25
    similarity_minclus = 1
    similarity_maxclus = 5
    similarity_criterion = 'ICL'
    similarity_preout = true
    similarity_postout = true
    similarity_mincorr = 0.5
    similarity_maxcorr = 1
    similarity_bsize = 0
    similarity_gsize = 4096
    similarity_lsize = 32

    // kinc run corrpower options
    corrpower_alpha = 0.001
    corrpower_power = 0.8

    // kinc run cond-test options
    condtest_delim = 'tab'
    condtest_nan = 'NA'
    condtest_tests = null
    condtest_types = null
    condtest_alpha = 0.001
    condtest_power = 0.8

    // kinc run extract options
    extract_format = 'tidy'
    extract_mincorr = 0
    extract_maxcorr = 1
    extract_pvalue = 0.001
    extract_rsquare = 0.3

    // kinc-filter-bias.R options
    filterbias_wa_th = 0.0001
    filterbias_wa_base = null
    filterbias_mtt_th = 0.1
    filterbias_split_size = 1000000

    // kinc-filter-rank.R options
    filterrank_top_n = null
    filterrank_score_weight = null
	filterrank_pval_weight = null
	filterrank_rsqr_weight = null

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // The --env NVIDIA_DISABLE_REQUIRE=1 addition is
        // to resolve a bug as described here:
        // https://github.com/NVIDIA/nvidia-docker/issues/1409
        docker.runOptions = "--init --gpus all --env NVIDIA_DISABLE_REQUIRE=1"        
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        singularity.runOptions = "--nv --bind \${TMPDIR}"
        singularity.autoMounts = true
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'systemsgenetics/kinc-nf'
    author          = 'Ben Shealey, Stephen Ficklin'
    homePage        = 'https://github.com/systemsgenetics/kinc-nf'
    description     = 'Knowledge Independent Network Construction'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '0.3'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
