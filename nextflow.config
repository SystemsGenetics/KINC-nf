manifest {
	mainScript = "main.nf"
	defaultBranch = "master"
	nextflowVersion = ">=0.32.0"
}

params {
	input {
		dir = "input"
		emx_txt_files = "*.emx.txt"
		emx_files = "*.emx"
		cmx_txt_files = "*.cmx.txt"
		ccm_files = "*.ccm"
		cmx_files = "*.cmx"
		rmt_files = "*.rmt.txt"
		net_files = "*.coexpnet.txt"
	}

	output {
		dir = "output"
	}

	import_emx {
		enabled = true
	}

	export_emx {
		enabled = false
	}

	similarity {
		enabled = true
		chunkrun = true
		chunks = 10
		gpu = false
		threads = 1
		clus_method = "none"
		corr_method = "spearman"
		min_expr = "-inf"
		min_clus = 1
		max_clus = 5
		criterion = "ICL"
		preout = true
		postout = true
		min_corr = 0.5
		max_corr = 1
		bsize = 0
		gsize = 4096
		lsize = 32
	}

	import_cmx {
		enabled = false
		max_clusters = 5
		corr_name = "pearson"
	}

	export_cmx {
		enabled = false
	}

	threshold {
		enabled = true
		reduction = "first"
		threads = 1
		spline = true
	}

	extract {
		enabled = true
	}

	visualize {
		enabled = false
		clusdist = false
		corrdist = false
		coverage = false
		pairwise = true
		pw_scale = true
	}
}



report {
	enabled = true
	file = "${params.output.dir}/reports/report.html"
}



timeline {
	enabled = true
	file = "${params.output.dir}/reports/timeline.html"
}



trace {
	enabled = true
	fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
	file = "${params.output.dir}/reports/trace.txt"
	raw = true
}



docker {
	runOptions = "--init --runtime=nvidia"
}



singularity {
	runOptions = "--bind \$TMPDIR --nv"
	autoMounts = true
	cacheDir = "work-singularity"
}



process {
	container = "systemsgenetics/kinc:3.3.0"
	errorStrategy = { task.attempt <= 2 ? "retry" : "ignore" }
	echo = false
	scratch = false
}



profiles {
	standard {
		process {
			executor = "local"

			withName:similarity_chunk {
				cpus = { params.similarity.gpu ? "${params.similarity.threads}" : 1 }
				memory = 8.GB

				gpu = { params.similarity.gpu ? 1 : 0 }
			}
			withName:similarity_mpi {
				cpus = { params.similarity.gpu ? "${params.similarity.chunks * params.similarity.threads}" : "${params.similarity.chunks}" }
				memory = 8.GB
			}
			withName:threshold {
				cpus = "${params.threshold.threads}"
				memory = 8.GB
			}
		}
	}

	testing {
		process.errorStrategy = "terminate"
	}

	pbs {
		process {
			executor = "pbs"
			time = "8h"
			clusterOptions = "-l select=1:mem=2gb:ncpus=2"

			module = "KINC"

			withName:similarity_chunk {
				time = "72h"
				clusterOptions = {
					params.similarity.gpu
						? "-l select=1:mem=8gb:ncpus=${params.similarity.threads}:ngpus=2:gpu_model=p100"
						: "-l select=1:mem=8gb:ncpus=1"
				}
			}
			withName:similarity_mpi {
				time = "72h"
				clusterOptions = {
					params.similarity.gpu
						? "-l select=${params.similarity.chunks / 2 + 1}:mem=8gb:ncpus=${params.similarity.threads * 2}:mpiprocs=2:ngpus=2:gpu_model=p100"
						: "-l select=${params.similarity.chunks}:mem=8gb:ncpus=1:mpiprocs=1"
				}
			}
			withName:threshold {
				time = "72h"
				clusterOptions = "-l select=1:mem=8gb:ncpus=${params.threshold.threads}"
			}
			withLabel:python {
				module = "anaconda3"
			}
		}
		executor {
			queueSize = 100
		}
	}
}
